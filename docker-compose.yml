version: '3.8'

services:
  # Votre application Spring Boot
  pollen-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pollen-monitoring-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      # Ajoutez ici d'autres variables d'environnement si nécessaire
    networks:
      - pollen-network
    restart: unless-stopped

  # Prometheus pour collecter les métriques
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - pollen-network
    restart: unless-stopped

  # Grafana pour visualiser les données
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - pollen-network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  pollen-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data: